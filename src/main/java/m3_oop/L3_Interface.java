package m3_oop;

// Интерфейсы, как и классы, могут наследоваться:

interface Printable{

    /*
    Кроме методов в интерфейсах могут быть определены статические константы:
    Хотя такие константы также не имеют модификаторов, но по умолчанию они имеют модификатор доступа public static final,
     и поэтому их значение доступно из любого места программы.
     */
    int OPEN = 1;
    int CLOSED = 0;

    void print();

    /*
     * В JDK 8 была добавлена такая функциональность как методы по умолчанию. И теперь интерфейсы кроме определения
     * методов могут иметь их реализацию по умолчанию, которая используется, если класс, реализующий данный интерфейс,
     * не реализует метод.
     */

    default void print2(){
        sumAll();
        System.out.println("Undefined printable");
    }

    // Начиная с JDK 8 в интерфейсах доступны статические методы - они аналогичны методам класса:

    static void read(){
        System.out.println("Read printable");
    }

    /*
    Однако начиная с Java 9 мы также можем определять в интерфейсе методы с модификатором private.
    Они могут быть статическими и нестатическими

    Подобные методы могут использоваться только внутри самого интерфейса, в котором они определены.
    То есть к примеру нам надо выполнять в интерфейсе некоторые повторяющиеся действия, и в этом случае такие действия
    можно выделить в приватные методы:
     */
    private int sumAll(int... values){
        int result = 0;
        for(int n : values){
            result += n;
        }
        return result;
    }
}


public class L3_Interface implements Printable{
    @Override
    public void print() {

    }

    public static void main(String[] args) {

        // Чтобы обратиться к статическому методу интерфейса также, как и в случае с классами, пишут название интерфейса и метод:

        Printable.read();
    }
}
