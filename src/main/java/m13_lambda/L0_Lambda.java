package m13_lambda;

/*
Лямбда представляет набор инструкций, которые можно выделить в отдельную переменную и затем многократно вызвать в различных местах программы.

Основу лямбда-выражения составляет лямбда-оператор, который представляет стрелку ->. Этот оператор разделяет
лямбда-выражение на две части: левая часть содержит список параметров выражения, а правая собственно представляет тело
лямбда-выражения, где выполняются все действия.

Лямбда-выражение не выполняется само по себе, а образует реализацию метода, определенного в функциональном интерфейсе.
При этом важно, что функциональный интерфейс должен содержать только один единственный метод без реализации.

Функциональный интерфейс — это интерфейс, который содержит только один абстрактный метод. Функциональный интерфейс
определяет только одно действие (операцию). В функциональном интерфейсе определяется целевой тип лямбда-выражения.
Функциональный интерфейс еще называют SAM-типом (Single Abstract Method).

Если метод не принимает никаких параметров, то пишутся пустые скобки - ()-> 30 + 20;
Если метод принимает только один параметр, то скобки можно опустить: n-> n * n;
 */
public class L0_Lambda {

    public static void main(String[] args) {
        /*
        параметры лямбда-выражения соответствуют параметрам единственного метода интерфейса TestLambda,
        а результат соответствует возвращаемому результату метода интерфейса. При этом нам не надо использовать ключевое слово
        return для возврата результата из лямбда-выражения.
         */
        TestLambda operation;
        operation = (x,y) -> x+y;

        int result = operation.calculate(10, 20);
        System.out.println(result); //30

        // При этом для одного функционального интерфейса мы можем определить множество лямбда-выражений. Например:
        TestLambda operation2 = (int x, int y)-> x - y;
        TestLambda operation3 = (int x, int y)-> x * y;

        System.out.println(operation2.calculate(20, 10)); //10
        System.out.println(operation3.calculate(20, 10)); //200

        // Терминальные лямбда-выражения не возвращают значение

        TerminalLambda terminal = () -> System.out.println("Terminal lambda");
        terminal.print();

        /*
        По факту лямбда-выражения являются в некотором роде сокращенной формой внутренних анонимных классов,
        которые ранее применялись в Java. Предыдущий пример мы можем переписать следующим образом:
         */
        TestLambda op = new TestLambda(){
            public int calculate(int x, int y){
                return x + y;
            }
        };
        int z = op.calculate(20, 10);
        System.out.println(z); // 30
    }
}

interface TestLambda{
    int calculate(int x, int y);
}

interface TerminalLambda{
    void print();
}
