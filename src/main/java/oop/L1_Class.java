package oop;

public class L1_Class {

    // объявление константы
    private static final float PI_NUMBER = 3.14F;

    // Модификаторы доступа
    public int age;
    protected int foo;
    private int height;

    // Статичный аттрибут
    public static int bar;

    //instance initializer
    {
        System.out.println("instance initializer called");
    }

    // Статические инициализаторы предназначены для инициализации статических переменных, либо для выполнения таких действий,
    // которые выполняются при создании самого первого объекта.
    // class initializer - выполняется только один раз, при создании первого объекта

    static {
        int counter = 105;
        System.out.println("Static initializer");
    }

    // перегруженые конструкторы

    public L1_Class() {
        // задаем начальные параметры полей. Обычно в таких ситуациях параметры задаются по умолчанию
        this.age = 14;
        this.height = 60;
    }

    public L1_Class(int age) {
        // задаем один начальный параметр, второй указываем при создании объекта
        this.age = age;
        this.height = 66;
    }

    public L1_Class(int age, int height) {
        // оба параметра задаем при создании объекта
        this.age = age;
        this.height = height;
    }

    // аналог перегузки конструкторов путем вызова конструктора  из конструктора

//    public L1_Class() {
//        this(13, 69);
//    }

    // объявленный конструктор является приватным. Может быть использован только в рамках данного класса
    // Создать объект вне класса не получится

    // private L1_Class(int age2) {}

    // Статический метод

    public static void staticMethod() {

    }

    // Внутренний класс
    // Внутренний класс ведет себя как обычный класс за тем исключением, что его объекты могут быть созданы только внутри внешнего класса.
    // Внутренний класс имеет доступ ко всем полям внешнего класса, в том числе закрытым с помощью модификатора private.
    // Аналогично внешний класс имеет доступ ко всем членам внутреннего класса, в том числе к полям и методам с модификатором private.
    // Ссылку на объект внешнего класса из внутреннего класса можно получить с помощью выражения Внешний_класс.this, например, Person.this.

    // Еще одной особенностей внутренних классов является то, что их можно объявить внутри любого контекста, в том числе внутри метода и даже в цикле:

    public class Account{
        private String password;

        Account(String pass){
            this.password = pass;
        }
        void displayAccount(){
            System.out.printf("");
        }
    }
}