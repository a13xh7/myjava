package m1_base;

public class L0_VariablesConstantsAssignmentAndOrder {

    // Константа
    public static final int CONSTANT = 777;

    public static void main(String[] args) {

        //  создаем константу с именем pi, типа double и присваиваем ей значение 3.141
        final double PI = 3.1415;
        // Попытка присвоения константе нового значения, приводит к ошибке уровня компиляции!
        // PI = 2.71828183;

        // Через запятую можно объявить сразу несколько переменных одного типа:
        int x, y;
        x = 10;
        y = 25;

        // Или
        int x2 = 8, y2 = 15;

        // Ключевое слово var
        // Начиная с Java 10 в язык было добавлено ключевое слово var, которое также позволяет определять переменную:
        // Слово var ставится вместо типа данных, а сам тип переменной выводится из того значения, которое ей присваивается.
        // Например, переменой x приваивается число 10, значит, переменная будет представлять тип int.
        // Но если переменная объявляется с помощью var, то мы обязательно должны инициализировать ее, то есть предоставить ей начальное значение, иначе мы получим ошибку,

        var vv = 10;
    }

    public static void assignment() {
        // = просто приравнивает одно значение другому: c=b;
        // c+=b; (переменной c присваивается результат сложения c и b)
        // c-=b; (переменной c присваивается результат вычитания b из c)
        // c*=b; (переменной c присваивается результат произведения c и b)
        // c/=b; (переменной c присваивается результат деления c на b)
        // c%=b; (переменной c присваивается остаток от деления c на b)
        // c&=b; (переменной c присваивается значение c&b)
        // c|=b; (переменной c присваивается значение c|b)
        // c^=b; (переменной c присваивается значение c^b)
        // c<<=b; (переменной c присваивается значение c<<b)
        // c>>=b; (переменной c присваивается значение c>>b)
        // c>>>=b; (переменной c присваивается значение c>>>b)

        int a = 5;
        a += 10;        // 15
        a -= 3;         // 12
        a *= 2;         // 24
        a /= 6;         // 4
        a <<= 4;      // 64
        a >>= 2;      // 16
        System.out.println(a);  // 16

        /* Приоритет операций

        При работе с операциями важно понимать их приоритет, который можно описать следующей таблицей:

            expr++ expr--
            ++expr --expr +expr -expr ~ !
            * / %
            + -
            << >> >>>
            < > <= >= instanceof
            == !=
            &
            ^
            |
            &&
            ||
            ? : (тернарный оператор)
            = += -= *= /= %= &= ^= |= <<= >>= >>>= (операторы присваивания)

        Чем выше оператор в этой таблице, тем больше его приоритет. При этом скобки повышают приоритет операции, используемой в выражении. */
    }
}
